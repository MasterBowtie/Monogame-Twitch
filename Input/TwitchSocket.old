using System;
using System.Data.Common;
using System.IO;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using TwitchLib.Api;
using TwitchLib.Api.Core.Exceptions;
using TwitchLib.Client;
using TwitchLib.Client.Events;
using TwitchLib.Client.Models;
using TwitchLib.Communication.Clients;
using TwitchLib.Communication.Models;
using TwitchLib.EventSub.Websockets.Client;

namespace Twitch
{
    class TwitchSocket
    {
        private Uri socketUri;
        private Uri tokenUri;
        private HttpClient client;
        private AuthenticationToken authToken;
        private TwitchClient twitchClient;
        private ConnectionCredentials credentials;
        private TwitchAPI api;

        //Scopes
        // user:read:chat -> channel:bot

        public TwitchSocket_old()
        {
            this.client = new HttpClient();
            this.socketUri = new Uri("wss://eventsub.wss.twitch.tv/ws");
            this.tokenUri = new Uri("https://id.twitch.tv/oauth2/token");
        }

        private class ClientData
        {
            public string clientId;
            public string clientSecret;
            public string accessToken;
            public string refreshToken;
            public string[] scopes;
        }

        private class AuthenticationToken
        {
            public string access_token { get; set; }
            public uint expires_in { get; set; }
            public string token_type { get; set; }
        }

        public void getToken(string username, string[] scopes)
        {
            string uri = tokenUri + $"?client_id={Environment.GetEnvironmentVariable("CLIENT_ID")}&client_secret={Environment.GetEnvironmentVariable("CLIENT_SECRET")}&grant_type=client_credentials";

            if (scopes.Length > 0)
            {
                uri += "&scope=";
                string scopeString = string.Join("%20", scopes);
                uri += scopeString;
            }

            Task.Run(async () =>
            {
                HttpRequestMessage request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(uri),
                    Method = HttpMethod.Post
                };

                var response = await this.client.SendAsync(request);
                var resString = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"AuthToken: {resString}");
                lock (this)
                {
                    authToken = JsonSerializer.Deserialize<AuthenticationToken>(resString);
                }
            });
        }

        private class Subscription
        {
            public string type;
            public uint version;
            public string condition;
            public Transport transport;

        }
        private class Condition {
            public string broadcaster_user_id;
            public string moderator_user_id;
            public string user_id;
            
        }
        private class Transport
        {
            public string method = "websocket";
            public string session_id;
        }

        private void setSubcriptions(Subscription[] subscriptions)
        {

        }

        private void setClient(string username, AuthenticationToken authToken)
        {
            if (this.authToken == null)
            {
                Console.WriteLine("Not Auth Token");
                return;
            }
            credentials = new ConnectionCredentials(username, authToken.access_token);
            var clientOptions = new ClientOptions
            {
                MessagesAllowedInPeriod = 750
            };
            WebSocketClient customClient = new WebSocketClient(clientOptions);
            this.twitchClient = new TwitchClient(customClient);
            twitchClient.Initialize(credentials, username);

            twitchClient.OnLog += onLog;
            twitchClient.OnConnected += onConnect;
            twitchClient.OnMessageReceived += onMessageReceived;
            twitchClient.Connect();
        }
        private void onLog(object sender, OnLogArgs e)
        {
            Console.WriteLine($"{e.DateTime.ToString()}: {e.BotUsername} - {e.Data}");
        }
        private void onConnect(object sender, OnConnectedArgs e)
        {
            Console.WriteLine($"Connected to {e.AutoJoinChannel}");
        }
        private void onMessageReceived(object sender, OnMessageReceivedArgs e)
        {
            Console.WriteLine(e);
        }
        private void onJoinedChannel(object sender, OnJoinedChannelArgs e)
        {
            Console.WriteLine("Hey guys! I am a bot connected via TwitchLib!");
        }

    }
}